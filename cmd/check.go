/*
Copyright Â© 2023 Jean-Marc Meessen jean-marc@meessen-web.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"regexp"

	"github.com/spf13/cobra"
)

var isVerboseCheck bool
// var verboseInputFileName string

// checkCmd represents the check command
var checkCmd = &cobra.Command{
	Use:   "check [input file]",
	Short: "Validates if input file has the correct format",
	Long: `The CHECK command validates whether the input file is processable.
	It must absolutely be generated by the GNU "datamash" pivot function in
	order to be successfully processed.`,
	Args: func(cmd *cobra.Command, args []string) error {
		if err := cobra.MinimumNArgs(1)(cmd, args); err != nil {
			return err
		}
		if !isFileValid(args[0]) {
			return fmt.Errorf("Invalid file")
		}
		return nil
	},
	Run: func(cmd *cobra.Command, args []string) {

		fmt.Println("checking", args[0], " with isVerboseCheck =", isVerboseCheck)

		if(!checkFile(args[0])){
			fmt.Print("Check failed.")
			os.Exit(1)
		}
	},
}

func init() {
	rootCmd.AddCommand(checkCmd)

	checkCmd.PersistentFlags().BoolVar(&isVerboseCheck, "verbose", false, "Displays useful info about the checked file")
}

//Loads the data from a file and try to parse it as a CSV
func checkFile(fileName string) bool{

	var isValidTable = true

    f, err := os.Open(fileName)
    if err != nil {
        log.Printf("Unable to read input file " + fileName + "\n", err)
		return false
    }
    defer f.Close()

	r := csv.NewReader(f)

	//The first record is not properly formatted, we skip it
	firstLine, err1 := r.Read()
	if err1 != nil {
		log.Printf("Unexpected error loading" + fileName + "\n", err)
		return false
	}
	nbrOfColumns := len(firstLine)
	fmt.Printf("Number of fields in first line: %d\n", nbrOfColumns )

	// first column should be empty
	if firstLine[0] != "" {
		fmt.Println("Not the expected first column name (should be empty)")
		return false
	}

	//loop through columns to check headings
	month_regexp, _ := regexp.Compile("20[0-9]{2}-[0-9]{2}")
	for i, s := range firstLine {
		if i != 0 {
			found := month_regexp.MatchString(s)
			if !found {
				fmt.Printf("Column header %s is not of the expected format (YYYY-MM)\n", s)
				return false
			}
		}
	}

	records, err := r.ReadAll()
	if err != nil {
		log.Printf("Unexpected error loading" + fileName + "\n", err)
		return false
	}


	fmt.Printf("number of records: %d\n", len(records))
	// fmt.Println(records)

	return isValidTable
}